!function(){"use strict";var e=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}getInitialData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a37d83b2-08ce-4c01-92cc-3eaed253626a","Content-Type":"application/json"}});class t{constructor(e,t,s,r){this._name=e.name,this._link=e.link,this._id=e._id,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._isRemoved=!1}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon())),this._trashButton.addEventListener("click",(()=>{this._isRemoved||this._handleDeleteClick(this._id)})),this._cardImage.addEventListener("click",(()=>this._handleImageClick(this._name,this._link)))}removeCard(){this._cardElement&&!this._isRemoved?(console.log(`Removing card with ID: ${this._id}`),this._cardElement.remove(),this._cardElement=null,this._isRemoved=!0,console.log(`Card with ID ${this._id} successfully removed.`)):console.warn(`Card element with ID ${this._id} is already removed or null.`)}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}getView(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._cardElement=e,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e,t){const s=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){const e=this._inputEls.some((e=>!e.validity.valid));this.disableSubmitButton(e)}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.disableSubmitButton(!0)}disableSubmitButton(e){e?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}}class r{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()}))}}class n extends r{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".popup__form"),this._inputList=this._form.querySelectorAll(".popup__input"),this._submitButton=this._form.querySelector(".popup__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleFormSubmit(this._getInputValues()).then((()=>this.close())).catch((e=>console.error(e))).finally((()=>{this._submitButton.textContent=this._submitButtonText}))}))}close(){super.close(),this._form.reset()}}function i(e,t){u.open({name:e,link:t})}function o(s){const r=new t(s,"#card-template",i,(t=>{console.log(`Opening confirmation popup for card ID: ${t}`),p.setSubmitAction((()=>(console.log(`Submitting delete request for card ID: ${t}`),e.deleteCard(t).then((()=>{console.log(`API delete successful for card ID: ${t}`),r.removeCard(),p.close()})).catch((e=>console.error("Error deleting card:",e)))))),p.open()}));return r.getView()}const a=document.querySelector("#profile-edit-button"),l=document.querySelector("#add-card-button"),c=document.querySelector(".profile__avatar-edit-button"),h=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){Array.isArray(e)?e.forEach((e=>{this._renderer(e)})):console.error("Items passed to renderItems are not an array:",e)}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{const t=o(e);h.addItem(t)}},".cards__list"),u=new class extends r{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".popup__preview-image"),this._popupCaption=this._popupElement.querySelector(".popup__preview-caption")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=t,this._popupCaption.textContent=t,super.open()}}("#preview-image-popup"),d=new n("#profile-edit-popup",(t=>e.updateUserInfo({name:t.title,about:t.description}).then((e=>{E.setUserInfo({name:e.name,job:e.about}),d.close()})).catch((e=>console.error("Error updating profile:",e))))),_=new n("#add-card-popup",(t=>e.addCard({name:t.title,link:t.url}).then((e=>{const t=o(e);h.addItem(t),_.close()})).catch((e=>console.error("Error adding card:",e))))),p=new class extends r{constructor(e){super(e),this._submitButton=this._popupElement.querySelector(".popup__button_confirm")}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._submitButton.addEventListener("click",(()=>{this._handleSubmit&&!this._submitInProgress&&(this._submitInProgress=!0,this._handleSubmit().finally((()=>{this._submitInProgress=!1})))}))}}("#delete-card-popup");p.setEventListeners();const m=new n("#avatar-edit-popup",(t=>e.updateAvatar(t.avatar).then((e=>{E.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),m.close()})).catch((e=>console.error("Error updating avatar:",e)))));m.setEventListeners();const E=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r),this._userId=null,this._nameElement&&this._jobElement&&this._avatarElement||console.error("One or more user info elements could not be found.")}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s,avatar:r,id:n}=e;t&&(this._nameElement.textContent=t),s&&(this._jobElement.textContent=s),r&&(this._avatarElement.src=r),n&&(this._userId=n)}getUserId(){return this._userId}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"});u.setEventListeners(),d.setEventListeners(),_.setEventListeners(),p.setEventListeners(),e.getInitialData().then((e=>{let[t,s]=e;E.setUserInfo({name:t.name,job:t.about,avatar:t.avatar,id:t._id}),h.renderItems(s)})).catch((e=>{console.error("Error fetching data:",e)})),a.addEventListener("click",(()=>{const e=E.getUserInfo();d.open(),d.setInputValues({title:e.name,description:e.job})})),c.addEventListener("click",(()=>{m.open()})),l.addEventListener("click",(()=>{_.open()}));const b={};(e=>{const t=Array.from(document.querySelectorAll(e.formSelector));console.log("Forms found by formSelector:",t),t.forEach((t=>{const r=new s(e,t),n=t.getAttribute("name");console.log("Initializing validator for form:",n),b[n]=r,r.enableValidation()}))})({formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,